@using System.Collections.Immutable


<MudFocusTrap>
    
    <div class="mud-input-control mud-input-input-control" tabindex="0" @onkeydown="@CurrentWordComponent.OnKeyDown">
        <MudButtonGroup>

            @for (var i = 0; i < Settings.WordLength; i++)
            {
                var i1 = i;
                char c;
                Variant variant;
                Color color;
                var val = @CurrentWordComponent.Text[i];

                if (Placeholder?.Length > i && @CurrentWordComponent.Text.All(x => !x.HasValue))
                {
                    c = Placeholder[i];
                    variant = Variant.Text;
                    color = GetColorFunc(i1, c);
                }
                else if (val.HasValue)
                {
                    c = val.Value;
                    color = GetColorFunc(i1, c);
                    variant = Variant.Filled;
                }
                else
                {
                    c = ' '; 
                    color = Color.Surface;
                    variant = Variant.Filled;
                }
                <MudChip
                    Color="@color"
                    Variant="@variant"
                    Label="true"
                    Style="@(CurrentWordComponent.CurrentIndex == i? "": "opacity:0.75;")"
                    Size="Size" OnClick="() => ChipClicked(i1)">
                    @c
                </MudChip>
            }
            <MudIconButton
                Icon="@Icons.Filled.Add"
                OnClick="@CurrentWordComponent.AddAction"
                Disabled="@CurrentWordComponent.AddDisabled"/>
        </MudButtonGroup>


        @if (!string.IsNullOrWhiteSpace(HelperText))
        {
            <div class="mud-input-control-helper-container">
                <p class="mud-input-helper-text">
                    <div class="d-flex">
                        <div class="mr-auto">@HelperText</div>
                    </div>
                </p>
            </div>
        }

    </div>

</MudFocusTrap>




@code {

    [Parameter]
    public string? HelperText { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    [EditorRequired]
    public GameSettings Settings { get; set; }

    [Parameter]
    [EditorRequired]
    public Size Size { get; set; }

    [Parameter]
    [EditorRequired]
    public Func<int, char, Color> GetColorFunc { get; set; }

    [Parameter]
    [EditorRequired]
    public CurrentWordComponent CurrentWordComponent { get; set; }
    

    private async Task ChipClicked(int index)
    {
        await CurrentWordComponent.ChangeIndex(index);
    }

}