@using System.Collections.Immutable

@code {

    [Parameter]
    [EditorRequired]
    public ImmutableArray<char?> Text { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<ImmutableArray<char?>> TextChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public int CurrentIndex { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback<int> CurrentIndexChanged { get; set; }

    [Parameter]
    [EditorRequired]
    public int MaxLength { get; set; }
    

    [Parameter]
    [EditorRequired]
    public Func<Task> AddAction { get; set; }


    public async Task OnKeyDown(KeyboardEventArgs obj)
    {
        const string enterKey = "Enter";
        const string backspaceKey = "Backspace";
        const string deleteKey = "Delete";
        const string leftKey = "ArrowLeft";
        const string rightKey = "ArrowRight";

        switch (obj.Key)
        {
            case leftKey:
                await MoveLeft();
                break;
            case rightKey:
                await MoveRight();
                break;
            case enterKey:
                await AddAction();
                break;
            case backspaceKey:
                await ClearPrevious();
                break;
            case deleteKey:
                await ClearNext();
                break;
            default:
            {
                if (obj.Key.Length == 1 && char.IsLetter(obj.Key.Single()))
                {
                    await InputLetter(char.ToUpperInvariant(obj.Key.Single()));
                }
                break;
            }
        }
    }

    public async Task MoveLeft()
    {
        CurrentIndex -= 1;
        NormalizeIndex();
        await CurrentIndexChanged.InvokeAsync(CurrentIndex);
    }

    private void NormalizeIndex()
    {
        CurrentIndex %= MaxLength;
        if (CurrentIndex < 0) CurrentIndex += MaxLength;
    }
    
    public async Task MoveRight()
    {
        CurrentIndex += 1;
        NormalizeIndex();
        await CurrentIndexChanged.InvokeAsync(CurrentIndex);
    }

    public async Task ClearPrevious()
    {
        if (CurrentIndex == 0)
            CurrentIndex += MaxLength;
        CurrentIndex -= 1;
        NormalizeIndex();
        await CurrentIndexChanged.InvokeAsync(CurrentIndex);
        await ClearCurrent();
    }

    public async Task ClearNext()
    {
        await ClearCurrent();
        CurrentIndex++;
        NormalizeIndex();
        await CurrentIndexChanged.InvokeAsync(CurrentIndex);
    }

    public async Task ClearCurrent()
    {
        Text = Text.SetItem(CurrentIndex, null);
        await TextChanged.InvokeAsync(Text);
    }

    public async Task InputLetter(char c)
    {
        Text = Text.SetItem(CurrentIndex, c);
        CurrentIndex++;
        NormalizeIndex();
        await CurrentIndexChanged.InvokeAsync(CurrentIndex);
        await TextChanged.InvokeAsync(Text);
    }

    public async Task ChangeIndex(int index)
    {
        CurrentIndex = index;
        await CurrentIndexChanged.InvokeAsync(CurrentIndex);
    }
}
