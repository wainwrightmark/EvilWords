@using BlazorWorker.Core
@using BlazorWorker.WorkerBackgroundService
@using BlazorWorker.BackgroundServiceFactory
@using System.Collections.Immutable
@using Generator.Equals
@implements IDisposable;
@inject IWorkerFactory _workerFactory

<MudList>
    @for (var guessResultIndex = 0; guessResultIndex < GameState.PreviousGuesses.Count; guessResultIndex++)
    {
        var guessResult = GameState.PreviousGuesses[guessResultIndex];
        var gri = guessResultIndex;

        <MudListItem>
            <GuessComponent Size="Size.Large" GuessResult="guessResult" ClickAction="cri => CycleResult(gri,cri)"/>
            <MudIconButton Icon="@Icons.Material.Filled.Close" OnClick="() => RemoveGuesses(gri)"/>
        </MudListItem>

        
    }

    @if (!GameState.IsWin)
    {
        <MudListItem>
            <WordInputComponent
                Text="@UserGuess"
                TextChanged="s=> UserGuess=s"
                Settings="@Settings"
                IsAddDisabled="!IsGoodGuess()"
                AddAction="()=>AddGuess()"
                Placeholder="@(Suggestion?.BestWord ?? "")"
                HelperText="@(Suggestion?.PossibilityText)"
                Size="Size.Large"
                GetColorFunc="GetColor"
            />

        </MudListItem>
    }
    


</MudList>


@code{
    public GameState GameState { get; set; } = new(ImmutableArray<GuessResult>.Empty);

    public GameSettings Settings { get; } = GameSettings.FiveLetter;
    
    private (IWorker Worker, IWorkerBackgroundService<SolverService> Service)? Worker { get; set; }

    public ImmutableArray<char?> UserGuess;

    private void ResetUserGuess()
    {
        UserGuess = Enumerable.Repeat(null as char?, Settings.WordLength).ToImmutableArray();
    }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        ResetUserGuess();
        await base.OnInitializedAsync();
        await ResetWorker();

        StateChanged();
    }

    public Color GetColor(int index, char c)
    {
        return GameState.GetColor(index, c);
    }

    private async Task ResetWorker()
    {
        if (Worker is not null)
        {
            await Worker.Value.Service.DisposeAsync();
            await Worker.Value.Worker.DisposeAsync();
        }

        var worker = await _workerFactory.CreateAsync();
        var service = await worker.CreateBackgroundServiceAsync<SolverService>(
            x => x
                .AddConventionalAssemblyOfService()
                .AddAssemblyOf<EquatableAttribute>()
                .AddAssemblies("Microsoft.Bcl.HashCode.dll", "System.Linq.Parallel.dll", "System.Diagnostics.Tracing.dll")
            );

        Worker = (worker, service);
    }

    public void RemoveGuesses(int index)
    {
        GameState = new GameState(GameState.PreviousGuesses.Take(index).ToImmutableArray());
        StateChanged();
    }

    public int StochasticSize { get; set; } = 20;

    public Random Random = new();


    private SuggestionData? Suggestion { get; set; } = null;

    public string? GetRealGuess()
    {
        string guess;
        if (UserGuess.Any(x => x.HasValue))
        {
            if (UserGuess.All(x => x.HasValue))
            {
                guess = new string(UserGuess.Select(x => x!.Value).ToArray());
            }
            else return null;
        }
        else
        {
            if (string.IsNullOrWhiteSpace(Suggestion?.BestWord)) return null;
            guess = Suggestion.Value.BestWord;
        }

        guess = new string(guess.Trim().ToUpperInvariant().Where(char.IsLetter).ToArray());

        if (guess.Length != Settings.WordLength || !Settings.PossibleGuesses.Contains(guess))
            return null;

        return guess;
    }

    public bool IsGoodGuess() => GetRealGuess() is not null;

    private async Task AddGuess()
    {
        var guess = GetRealGuess();
        if (guess is null) return;

        var newGuessResult = GuessResult.GetWorstCase(guess, GameState, Settings);

        GameState = GameState.Add(newGuessResult);
        ResetUserGuess();
        StateChanged();
    }

    private void ChangeChar(char newCharacter, int resultIndex, int charIndex)
    {
        var guess = GameState.PreviousGuesses[resultIndex];
        var character = guess.Results[charIndex];

        var newChr = character with{Character = newCharacter};
        var newResults = guess.Results.ToList();
        newResults[charIndex] = newChr;

        var newGuess = guess with{Results = newResults};
        var newGameState = GameState with{PreviousGuesses = GameState.PreviousGuesses.ToImmutableList().SetItem(resultIndex, newGuess)};

        GameState = newGameState;

        StateChanged();
    }

    private void CycleResult(int resultIndex, int charIndex)
    {
        var guess = GameState.PreviousGuesses[resultIndex];
        var character = guess.Results[charIndex];

        var newChr = character with{ResultColor = character.ResultColor.CycleToNext()};
        var newResults = guess.Results.ToList();
        newResults[charIndex] = newChr;

        var newGuess = guess with{Results = newResults};
        var newGameState = GameState with{PreviousGuesses = GameState.PreviousGuesses.ToImmutableList().SetItem(resultIndex, newGuess)};

        GameState = newGameState;

        StateChanged();
    }

    private CancellationTokenSource? _cancellationTokenSource;

    private async Task StateChanged()
    {
        _cancellationTokenSource?.Cancel();
        var newCts = new CancellationTokenSource();
        _cancellationTokenSource = newCts;
        Suggestion = null;
        StateHasChanged();
        
        var serializedGameState = GameState.Serialize();

        var gro = GameState.MakeGuessResultOptimizer();
        var possibilities = Settings.FilterHiddenWords(gro);
        string? bestGuess;

        if (possibilities.Count <= 0)
            bestGuess = null;
        else if (possibilities.Count <= 1)
            bestGuess = possibilities.Single();
        else
        {
            if (newCts.IsCancellationRequested)
                return;

            Suggestion = new SuggestionData(Suggestion?.BestWord ?? "", possibilities);
            StateHasChanged();

            if(Worker is null)return;

            try
            {
                await Worker.Value.Service.RunAsync(x => x.Cancel());

                bestGuess =
                    await Worker.Value.Service.RunAsync(x =>
                        x.GetBestGuess(serializedGameState)
                        );
            }
            catch (Exception e)
            {
                var message = GetInnerMostMessage(e);

                Console.WriteLine(message);
                return;
            }
        }

        if (newCts.IsCancellationRequested)
            return;
        Suggestion = new SuggestionData(bestGuess ?? "", possibilities);

        _cancellationTokenSource = null;
        StateHasChanged();

        static string GetInnerMostMessage(Exception e)
        {
            if (e.InnerException is not null) return GetInnerMostMessage(e.InnerException);
            return e.Message;
        }
    }

    /// <inheritdoc />
    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        if (Worker is not null)
        {
            Worker.Value.Service.DisposeAsync();
            Worker.Value.Worker.DisposeAsync();
        }
    }

}