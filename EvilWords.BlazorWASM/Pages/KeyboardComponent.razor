@if (CurrentWordComponent is not null)
{

    <div @onkeydown="kea=> CurrentWordComponent.OnKeyDown(kea)">
        @for (var rowNumber = 0; rowNumber < KeysRows.Count; rowNumber++)
        {
            var rn = rowNumber;
            var row = KeysRows[rowNumber];

            <MudButtonGroup>

                @if (rn == 2)
                {
                    <MudChip 
                        Size="Size.Medium" 
                        Label="true" 
                        Icon="@Icons.Filled.Backspace" 
                        Disabled="@CurrentWordComponent.BackspaceDisabled"
                        Color="Color.Info"
                        OnClick="@CurrentWordComponent.ClearCurrent"/>
                }

                @foreach (var c in row)
                {
                    var color = GuessResultOptimizer.GetColor(CurrentWordComponent.CurrentIndex, c);
                    <MudChip
                        Color="@color"
                        Variant="@Variant.Filled"
                        Label="true"
                        Size="Size.Medium" OnClick="() => CurrentWordComponent.InputLetter(c)">
                        @c
                    </MudChip>
                }

                @if (rn is 0 or 1)
                {
                @*<MudItem xs="2"/>*@
                }
                else
                {
                    <MudItem xs="1">
                        <MudChip Size="Size.Medium"
                                 Label="true"
                                 Icon="@Icons.Filled.Send" 
                                 Color="Color.Info"
                                 Style="width:250px;"
                                 Disabled="@CurrentWordComponent.AddDisabled"
                                 OnClick="@CurrentWordComponent.AddAction"/>
                    </MudItem>
                    <MudItem xs="2"/>
                }
            </MudButtonGroup>

        }

    </div>
}

@code {

    [Parameter]
    [EditorRequired]
    public CurrentWordComponent CurrentWordComponent { get; set; }

    [Parameter]
    [EditorRequired]
    public GuessResultOptimizer? GuessResultOptimizer { get; set; }

    public List<string> KeysRows = new List<string>()
    {
        "QWERTYUIOP",
        "ASDFGHJKL",
        "ZXCVBNM"
    };

}